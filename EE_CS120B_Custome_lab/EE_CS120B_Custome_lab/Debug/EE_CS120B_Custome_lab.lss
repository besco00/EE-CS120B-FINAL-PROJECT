
EE_CS120B_Custome_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  0000077e  00000812  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800168  00800168  0000087a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000008f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ed  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b50  00000000  00000000  0000212d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bdc  00000000  00000000  00002c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  0000385c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000773  00000000  00000000  00003a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067f  00000000  00000000  000041f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	9d c1       	rjmp	.+826    	; 0x370 <__vector_13>
  36:	00 00       	nop
  38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
  76:	00 00       	nop
  78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	56 02       	muls	r21, r22
  8e:	5a 02       	muls	r21, r26
  90:	68 02       	muls	r22, r24
  92:	79 02       	muls	r23, r25
  94:	81 02       	muls	r24, r17
  96:	91 02       	muls	r25, r17
  98:	97 02       	muls	r25, r23
  9a:	9b 02       	muls	r25, r27
  9c:	e5 02       	muls	r30, r21

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	ee e7       	ldi	r30, 0x7E	; 126
  b2:	f7 e0       	ldi	r31, 0x07	; 7
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a8 36       	cpi	r26, 0x68	; 104
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a8 e6       	ldi	r26, 0x68	; 104
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a9 39       	cpi	r26, 0x99	; 153
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	91 d2       	rcall	.+1314   	; 0x5f8 <main>
  d6:	51 c3       	rjmp	.+1698   	; 0x77a <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
  da:	18 16       	cp	r1, r24
  dc:	19 06       	cpc	r1, r25
  de:	5c f0       	brlt	.+22     	; 0xf6 <delay_ms+0x1c>
  e0:	08 95       	ret
	for(j=0;j<775;j++)
	{
		asm("nop");
  e2:	00 00       	nop
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++)
  e8:	e1 f7       	brne	.-8      	; 0xe2 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
  ea:	4f 5f       	subi	r20, 0xFF	; 255
  ec:	5f 4f       	sbci	r21, 0xFF	; 255
  ee:	84 17       	cp	r24, r20
  f0:	95 07       	cpc	r25, r21
  f2:	19 f4       	brne	.+6      	; 0xfa <delay_ms+0x20>
  f4:	08 95       	ret
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
	}
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
  fa:	27 e0       	ldi	r18, 0x07	; 7
  fc:	33 e0       	ldi	r19, 0x03	; 3
  fe:	f1 cf       	rjmp	.-30     	; 0xe2 <delay_ms+0x8>

00000100 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 100:	5e 98       	cbi	0x0b, 6	; 11
	DATA_BUS = Command;
 102:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 104:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 106:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 108:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	e5 cf       	rjmp	.-54     	; 0xda <delay_ms>
 110:	08 95       	ret

00000112 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	f5 cf       	rjmp	.-22     	; 0x100 <LCD_WriteCommand>
 116:	08 95       	ret

00000118 <LCD_Cursor>:
		LCD_WriteData(*string++);
	}
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x1 LCD: column < 9
 118:	81 31       	cpi	r24, 0x11	; 17
 11a:	18 f4       	brcc	.+6      	; 0x122 <LCD_Cursor+0xa>
		// 16x2 LCD: column < 17
		LCD_WriteCommand(0x80 + column - 1);
 11c:	81 58       	subi	r24, 0x81	; 129
 11e:	f0 cf       	rjmp	.-32     	; 0x100 <LCD_WriteCommand>
 120:	08 95       	ret
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 122:	81 55       	subi	r24, 0x51	; 81
 124:	ed cf       	rjmp	.-38     	; 0x100 <LCD_WriteCommand>
 126:	08 95       	ret

00000128 <LCD_init>:
}

void LCD_init(void) {

	//wait for 100 ms.
	delay_ms(100);
 128:	84 e6       	ldi	r24, 0x64	; 100
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	d6 df       	rcall	.-84     	; 0xda <delay_ms>
	LCD_WriteCommand(0x38);
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	e7 df       	rcall	.-50     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	e5 df       	rcall	.-54     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	e3 df       	rcall	.-58     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	e1 df       	rcall	.-62     	; 0x100 <LCD_WriteCommand>
	delay_ms(10);
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	cb cf       	rjmp	.-106    	; 0xda <delay_ms>
 144:	08 95       	ret

00000146 <LCD_WriteData>:
 146:	5e 9a       	sbi	0x0b, 6	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 148:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 14a:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 14c:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 14e:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(1);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	c2 cf       	rjmp	.-124    	; 0xda <delay_ms>
 156:	08 95       	ret

00000158 <LCD_createChar>:
}

/**
FUNCTION TO CREATE A CUSTOM ASCII CHARACTER :) PRETTY COOL THO
**/
void LCD_createChar(unsigned char indx, unsigned char *ptr) {
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	8b 01       	movw	r16, r22
	unsigned char i;
	if (indx < 8) {
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	68 f4       	brcc	.+26     	; 0x180 <LCD_createChar+0x28>
		LCD_WriteCommand(0x40 + indx*8);
 166:	88 0f       	add	r24, r24
 168:	88 0f       	add	r24, r24
 16a:	88 0f       	add	r24, r24
 16c:	80 5c       	subi	r24, 0xC0	; 192
 16e:	c8 df       	rcall	.-112    	; 0x100 <LCD_WriteCommand>
 170:	e8 01       	movw	r28, r16
 172:	08 5f       	subi	r16, 0xF8	; 248
 174:	1f 4f       	sbci	r17, 0xFF	; 255
		for (i = 0; i < 8; i++) {
			LCD_WriteData(ptr[i]);
 176:	89 91       	ld	r24, Y+
 178:	e6 df       	rcall	.-52     	; 0x146 <LCD_WriteData>
**/
void LCD_createChar(unsigned char indx, unsigned char *ptr) {
	unsigned char i;
	if (indx < 8) {
		LCD_WriteCommand(0x40 + indx*8);
		for (i = 0; i < 8; i++) {
 17a:	c0 17       	cp	r28, r16
 17c:	d1 07       	cpc	r29, r17
			LCD_WriteData(ptr[i]);
		}
	}
	LCD_WriteCommand(0x80);
 17e:	d9 f7       	brne	.-10     	; 0x176 <LCD_createChar+0x1e>
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	be df       	rcall	.-132    	; 0x100 <LCD_WriteCommand>
	// LCD_WriteData(indx);
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	18 2f       	mov	r17, r24
 198:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
 19a:	bb df       	rcall	.-138    	; 0x112 <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
 19c:	88 81       	ld	r24, Y
 19e:	88 23       	and	r24, r24
 1a0:	51 f0       	breq	.+20     	; 0x1b6 <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
 1a2:	01 e0       	ldi	r16, 0x01	; 1
 1a4:	01 0f       	add	r16, r17
 1a6:	81 2f       	mov	r24, r17
 1a8:	b7 df       	rcall	.-146    	; 0x118 <LCD_Cursor>
		LCD_WriteData(*string++);
 1aa:	89 91       	ld	r24, Y+
 1ac:	cc df       	rcall	.-104    	; 0x146 <LCD_WriteData>
 1ae:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 1b0:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 1b2:	81 11       	cpse	r24, r1
 1b4:	f6 cf       	rjmp	.-20     	; 0x1a2 <LCD_DisplayString+0x14>
 1b6:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <LCD_DisplayString_NO_CLEAR>:
 1c0:	1f 93       	push	r17

void LCD_DisplayString_NO_CLEAR( unsigned char column, const unsigned char* string) {
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
 1c6:	fb 01       	movw	r30, r22
 1c8:	90 81       	ld	r25, Z
 1ca:	99 23       	and	r25, r25
 1cc:	51 f0       	breq	.+20     	; 0x1e2 <LCD_DisplayString_NO_CLEAR+0x22>
 1ce:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 1d0:	11 e0       	ldi	r17, 0x01	; 1
 1d2:	18 0f       	add	r17, r24
 1d4:	a1 df       	rcall	.-190    	; 0x118 <LCD_Cursor>
		LCD_WriteData(*string++);
 1d6:	89 91       	ld	r24, Y+
 1d8:	b6 df       	rcall	.-148    	; 0x146 <LCD_WriteData>
}

void LCD_DisplayString_NO_CLEAR( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 1da:	81 2f       	mov	r24, r17
	}
}

void LCD_DisplayString_NO_CLEAR( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
 1dc:	98 81       	ld	r25, Y
 1de:	91 11       	cpse	r25, r1
 1e0:	f7 cf       	rjmp	.-18     	; 0x1d0 <LCD_DisplayString_NO_CLEAR+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	08 95       	ret

000001ea <P1_POS>:
}

void check_High_Score() {
	if (current_score > highScore) {
		eeprom_write_byte((uint8_t*)22, current_score);
		highScore = eeprom_read_byte((uint8_t*)22);
 1ea:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <p1_pos>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	19 f1       	breq	.+70     	; 0x238 <P1_POS+0x4e>
 1f2:	28 f4       	brcc	.+10     	; 0x1fe <P1_POS+0x14>
 1f4:	88 23       	and	r24, r24
 1f6:	41 f0       	breq	.+16     	; 0x208 <P1_POS+0x1e>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	b1 f0       	breq	.+44     	; 0x228 <P1_POS+0x3e>
 1fc:	2b c0       	rjmp	.+86     	; 0x254 <P1_POS+0x6a>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	f1 f0       	breq	.+60     	; 0x23e <P1_POS+0x54>
 202:	84 30       	cpi	r24, 0x04	; 4
 204:	21 f1       	breq	.+72     	; 0x24e <P1_POS+0x64>
 206:	26 c0       	rjmp	.+76     	; 0x254 <P1_POS+0x6a>
 208:	00 99       	sbic	0x00, 0	; 0
 20a:	06 c0       	rjmp	.+12     	; 0x218 <P1_POS+0x2e>
 20c:	01 9b       	sbis	0x00, 1	; 0
 20e:	04 c0       	rjmp	.+8      	; 0x218 <P1_POS+0x2e>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <p1_pos>
 216:	08 95       	ret
 218:	00 9b       	sbis	0x00, 0	; 0
 21a:	27 c0       	rjmp	.+78     	; 0x26a <P1_POS+0x80>
 21c:	01 99       	sbic	0x00, 1	; 0
 21e:	25 c0       	rjmp	.+74     	; 0x26a <P1_POS+0x80>
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <p1_pos>
 226:	08 95       	ret
 228:	00 9b       	sbis	0x00, 0	; 0
 22a:	1f c0       	rjmp	.+62     	; 0x26a <P1_POS+0x80>
 22c:	00 9b       	sbis	0x00, 0	; 0
 22e:	1d c0       	rjmp	.+58     	; 0x26a <P1_POS+0x80>
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <p1_pos>
 236:	16 c0       	rjmp	.+44     	; 0x264 <P1_POS+0x7a>
 238:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <p1_pos>
 23c:	08 95       	ret
 23e:	01 9b       	sbis	0x00, 1	; 0
 240:	14 c0       	rjmp	.+40     	; 0x26a <P1_POS+0x80>
 242:	01 9b       	sbis	0x00, 1	; 0
 244:	12 c0       	rjmp	.+36     	; 0x26a <P1_POS+0x80>
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <p1_pos>
 24c:	07 c0       	rjmp	.+14     	; 0x25c <P1_POS+0x72>
 24e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <p1_pos>
 252:	08 95       	ret
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	31 f0       	breq	.+12     	; 0x264 <P1_POS+0x7a>
 258:	84 30       	cpi	r24, 0x04	; 4
 25a:	39 f4       	brne	.+14     	; 0x26a <P1_POS+0x80>
 25c:	81 e1       	ldi	r24, 0x11	; 17
 25e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <CURRENT_PLAYER1_POS>
 262:	08 95       	ret
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <CURRENT_PLAYER1_POS>
 26a:	08 95       	ret

0000026c <P2_logic>:
 26c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <P2_LOGIC>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	19 f1       	breq	.+70     	; 0x2ba <P2_logic+0x4e>
 274:	28 f4       	brcc	.+10     	; 0x280 <P2_logic+0x14>
 276:	88 23       	and	r24, r24
 278:	41 f0       	breq	.+16     	; 0x28a <P2_logic+0x1e>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	b1 f0       	breq	.+44     	; 0x2aa <P2_logic+0x3e>
 27e:	2b c0       	rjmp	.+86     	; 0x2d6 <P2_logic+0x6a>
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	f1 f0       	breq	.+60     	; 0x2c0 <P2_logic+0x54>
 284:	84 30       	cpi	r24, 0x04	; 4
 286:	21 f1       	breq	.+72     	; 0x2d0 <P2_logic+0x64>
 288:	26 c0       	rjmp	.+76     	; 0x2d6 <P2_logic+0x6a>
 28a:	18 99       	sbic	0x03, 0	; 3
 28c:	06 c0       	rjmp	.+12     	; 0x29a <P2_logic+0x2e>
 28e:	19 9b       	sbis	0x03, 1	; 3
 290:	04 c0       	rjmp	.+8      	; 0x29a <P2_logic+0x2e>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <P2_LOGIC>
 298:	08 95       	ret
 29a:	18 9b       	sbis	0x03, 0	; 3
 29c:	27 c0       	rjmp	.+78     	; 0x2ec <P2_logic+0x80>
 29e:	19 99       	sbic	0x03, 1	; 3
 2a0:	25 c0       	rjmp	.+74     	; 0x2ec <P2_logic+0x80>
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <P2_LOGIC>
 2a8:	08 95       	ret
 2aa:	18 9b       	sbis	0x03, 0	; 3
 2ac:	1f c0       	rjmp	.+62     	; 0x2ec <P2_logic+0x80>
 2ae:	18 9b       	sbis	0x03, 0	; 3
 2b0:	1d c0       	rjmp	.+58     	; 0x2ec <P2_logic+0x80>
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <P2_LOGIC>
 2b8:	16 c0       	rjmp	.+44     	; 0x2e6 <P2_logic+0x7a>
 2ba:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <P2_LOGIC>
 2be:	08 95       	ret
 2c0:	19 9b       	sbis	0x03, 1	; 3
 2c2:	14 c0       	rjmp	.+40     	; 0x2ec <P2_logic+0x80>
 2c4:	19 9b       	sbis	0x03, 1	; 3
 2c6:	12 c0       	rjmp	.+36     	; 0x2ec <P2_logic+0x80>
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <P2_LOGIC>
 2ce:	07 c0       	rjmp	.+14     	; 0x2de <P2_logic+0x72>
 2d0:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <P2_LOGIC>
 2d4:	08 95       	ret
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	31 f0       	breq	.+12     	; 0x2e6 <P2_logic+0x7a>
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	39 f4       	brne	.+14     	; 0x2ec <P2_logic+0x80>
 2de:	80 e2       	ldi	r24, 0x20	; 32
 2e0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <CURRENT_PLAYER2_POS>
 2e4:	08 95       	ret
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <CURRENT_PLAYER2_POS>
 2ec:	08 95       	ret

000002ee <render>:
 2ee:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <render_state>
 2f2:	88 23       	and	r24, r24
 2f4:	11 f0       	breq	.+4      	; 0x2fa <render+0xc>
 2f6:	81 11       	cpse	r24, r1
 2f8:	16 c0       	rjmp	.+44     	; 0x326 <render+0x38>
 2fa:	00 9b       	sbis	0x00, 0	; 0
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <render+0x1c>
 2fe:	01 9b       	sbis	0x00, 1	; 0
 300:	04 c0       	rjmp	.+8      	; 0x30a <render+0x1c>
 302:	18 9b       	sbis	0x03, 0	; 3
 304:	02 c0       	rjmp	.+4      	; 0x30a <render+0x1c>
 306:	19 99       	sbic	0x03, 1	; 3
 308:	0e c0       	rjmp	.+28     	; 0x326 <render+0x38>
 30a:	0e df       	rcall	.-484    	; 0x128 <LCD_init>
 30c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <CURRENT_PLAYER1_POS>
 310:	03 df       	rcall	.-506    	; 0x118 <LCD_Cursor>
 312:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <CURRENT_PLAYER>
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	16 df       	rcall	.-468    	; 0x146 <LCD_WriteData>
 31a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <CURRENT_PLAYER2_POS>
 31e:	fc de       	rcall	.-520    	; 0x118 <LCD_Cursor>
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	10 cf       	rjmp	.-480    	; 0x146 <LCD_WriteData>
 326:	08 95       	ret

00000328 <TimerOn>:
 328:	8b e0       	ldi	r24, 0x0B	; 11
 32a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 32e:	8f e0       	ldi	r24, 0x0F	; 15
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 336:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 340:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 344:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 348:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_avr_timer_M>
 34c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <_avr_timer_M+0x1>
 350:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <_avr_timer_M+0x2>
 354:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <_avr_timer_M+0x3>
 358:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <_avr_timer_cntcurr>
 35c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <_avr_timer_cntcurr+0x1>
 360:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <_avr_timer_cntcurr+0x2>
 364:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <_avr_timer_cntcurr+0x3>
 368:	8f b7       	in	r24, 0x3f	; 63
 36a:	80 68       	ori	r24, 0x80	; 128
 36c:	8f bf       	out	0x3f, r24	; 63
 36e:	08 95       	ret

00000370 <__vector_13>:
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	8f 93       	push	r24
 37c:	9f 93       	push	r25
 37e:	af 93       	push	r26
 380:	bf 93       	push	r27
 382:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <_avr_timer_cntcurr>
 386:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <_avr_timer_cntcurr+0x1>
 38a:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <_avr_timer_cntcurr+0x2>
 38e:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <_avr_timer_cntcurr+0x3>
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	a1 09       	sbc	r26, r1
 396:	b1 09       	sbc	r27, r1
 398:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <_avr_timer_cntcurr>
 39c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <_avr_timer_cntcurr+0x1>
 3a0:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <_avr_timer_cntcurr+0x2>
 3a4:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <_avr_timer_cntcurr+0x3>
 3a8:	89 2b       	or	r24, r25
 3aa:	8a 2b       	or	r24, r26
 3ac:	8b 2b       	or	r24, r27
 3ae:	99 f4       	brne	.+38     	; 0x3d6 <__vector_13+0x66>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <TimerFlag>
 3b6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_avr_timer_M>
 3ba:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <_avr_timer_M+0x1>
 3be:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <_avr_timer_M+0x2>
 3c2:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <_avr_timer_M+0x3>
 3c6:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <_avr_timer_cntcurr>
 3ca:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <_avr_timer_cntcurr+0x1>
 3ce:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <_avr_timer_cntcurr+0x2>
 3d2:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <_avr_timer_cntcurr+0x3>
 3d6:	bf 91       	pop	r27
 3d8:	af 91       	pop	r26
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <TimerSet>:
 3e8:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <_avr_timer_M>
 3ec:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <_avr_timer_M+0x1>
 3f0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_M+0x2>
 3f4:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_M+0x3>
 3f8:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <_avr_timer_cntcurr>
 3fc:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <_avr_timer_cntcurr+0x1>
 400:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <_avr_timer_cntcurr+0x2>
 404:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <_avr_timer_cntcurr+0x3>
 408:	08 95       	ret

0000040a <update_menu>:
 40a:	8e de       	rcall	.-740    	; 0x128 <LCD_init>
 40c:	82 de       	rcall	.-764    	; 0x112 <LCD_ClearScreen>
 40e:	6f e2       	ldi	r22, 0x2F	; 47
 410:	71 e0       	ldi	r23, 0x01	; 1
 412:	82 e1       	ldi	r24, 0x12	; 18
 414:	bc de       	rcall	.-648    	; 0x18e <LCD_DisplayString>
 416:	8d e1       	ldi	r24, 0x1D	; 29
 418:	7f de       	rcall	.-770    	; 0x118 <LCD_Cursor>
 41a:	86 e1       	ldi	r24, 0x16	; 22
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	94 d1       	rcall	.+808    	; 0x748 <eeprom_read_byte>
 420:	85 31       	cpi	r24, 0x15	; 21
 422:	18 f4       	brcc	.+6      	; 0x42a <update_menu+0x20>
 424:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <highScore>
 428:	02 c0       	rjmp	.+4      	; 0x42e <update_menu+0x24>
 42a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <highScore>
 42e:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <highScore>
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	86 e1       	ldi	r24, 0x16	; 22
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	9d d1       	rcall	.+826    	; 0x774 <eeprom_write_word>
 43a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <highScore>
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	c0 96       	adiw	r24, 0x30	; 48
 442:	81 de       	rcall	.-766    	; 0x146 <LCD_WriteData>
 444:	8f e1       	ldi	r24, 0x1F	; 31
 446:	68 de       	rcall	.-816    	; 0x118 <LCD_Cursor>
 448:	68 e1       	ldi	r22, 0x18	; 24
 44a:	71 e0       	ldi	r23, 0x01	; 1
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	83 de       	rcall	.-762    	; 0x158 <LCD_createChar>
 452:	60 e1       	ldi	r22, 0x10	; 16
 454:	71 e0       	ldi	r23, 0x01	; 1
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	7e de       	rcall	.-772    	; 0x158 <LCD_createChar>
 45c:	68 e0       	ldi	r22, 0x08	; 8
 45e:	71 e0       	ldi	r23, 0x01	; 1
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	79 de       	rcall	.-782    	; 0x158 <LCD_createChar>
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	71 e0       	ldi	r23, 0x01	; 1
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	74 de       	rcall	.-792    	; 0x158 <LCD_createChar>
 470:	87 e0       	ldi	r24, 0x07	; 7
 472:	52 de       	rcall	.-860    	; 0x118 <LCD_Cursor>
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	66 de       	rcall	.-820    	; 0x146 <LCD_WriteData>
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	63 de       	rcall	.-826    	; 0x146 <LCD_WriteData>
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	60 de       	rcall	.-832    	; 0x146 <LCD_WriteData>
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	5d de       	rcall	.-838    	; 0x146 <LCD_WriteData>
 48c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <POSITION>
 490:	43 ce       	rjmp	.-890    	; 0x118 <LCD_Cursor>
 492:	08 95       	ret

00000494 <start_menu>:
 494:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <menu_states>
 498:	8e 2f       	mov	r24, r30
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	89 30       	cpi	r24, 0x09	; 9
 49e:	91 05       	cpc	r25, r1
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <start_menu+0x10>
 4a2:	51 c0       	rjmp	.+162    	; 0x546 <start_menu+0xb2>
 4a4:	fc 01       	movw	r30, r24
 4a6:	ea 5b       	subi	r30, 0xBA	; 186
 4a8:	ff 4f       	sbci	r31, 0xFF	; 255
 4aa:	45 c1       	rjmp	.+650    	; 0x736 <__tablejump2__>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <menu_states>
 4b2:	5e c0       	rjmp	.+188    	; 0x570 <start_menu+0xdc>
 4b4:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <counter>
 4b8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <sec_2>
 4bc:	98 17       	cp	r25, r24
 4be:	08 f4       	brcc	.+2      	; 0x4c2 <start_menu+0x2e>
 4c0:	57 c0       	rjmp	.+174    	; 0x570 <start_menu+0xdc>
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <menu_states>
 4c8:	24 de       	rcall	.-952    	; 0x112 <LCD_ClearScreen>
 4ca:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <counter>
 4ce:	3b c0       	rjmp	.+118    	; 0x546 <start_menu+0xb2>
 4d0:	02 99       	sbic	0x00, 2	; 0
 4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <start_menu+0x50>
 4d4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <counter>
 4d8:	84 36       	cpi	r24, 0x64	; 100
 4da:	48 f4       	brcc	.+18     	; 0x4ee <start_menu+0x5a>
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <menu_states>
 4e2:	08 95       	ret
 4e4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <counter>
 4e8:	84 36       	cpi	r24, 0x64	; 100
 4ea:	08 f4       	brcc	.+2      	; 0x4ee <start_menu+0x5a>
 4ec:	51 c0       	rjmp	.+162    	; 0x590 <start_menu+0xfc>
 4ee:	80 b1       	in	r24, 0x00	; 0
 4f0:	4f c0       	rjmp	.+158    	; 0x590 <start_menu+0xfc>
 4f2:	02 9b       	sbis	0x00, 2	; 0
 4f4:	80 c0       	rjmp	.+256    	; 0x5f6 <start_menu+0x162>
 4f6:	02 9b       	sbis	0x00, 2	; 0
 4f8:	7e c0       	rjmp	.+252    	; 0x5f6 <start_menu+0x162>
 4fa:	84 e0       	ldi	r24, 0x04	; 4
 4fc:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <menu_states>
 500:	08 95       	ret
 502:	00 99       	sbic	0x00, 0	; 0
 504:	06 c0       	rjmp	.+12     	; 0x512 <start_menu+0x7e>
 506:	02 9b       	sbis	0x00, 2	; 0
 508:	04 c0       	rjmp	.+8      	; 0x512 <start_menu+0x7e>
 50a:	85 e0       	ldi	r24, 0x05	; 5
 50c:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <menu_states>
 510:	08 95       	ret
 512:	02 99       	sbic	0x00, 2	; 0
 514:	70 c0       	rjmp	.+224    	; 0x5f6 <start_menu+0x162>
 516:	00 9b       	sbis	0x00, 0	; 0
 518:	6e c0       	rjmp	.+220    	; 0x5f6 <start_menu+0x162>
 51a:	87 e0       	ldi	r24, 0x07	; 7
 51c:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <menu_states>
 520:	08 95       	ret
 522:	00 9b       	sbis	0x00, 0	; 0
 524:	68 c0       	rjmp	.+208    	; 0x5f6 <start_menu+0x162>
 526:	86 e0       	ldi	r24, 0x06	; 6
 528:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <menu_states>
 52c:	41 c0       	rjmp	.+130    	; 0x5b0 <start_menu+0x11c>
 52e:	84 e0       	ldi	r24, 0x04	; 4
 530:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <menu_states>
 534:	08 95       	ret
 536:	02 9b       	sbis	0x00, 2	; 0
 538:	04 c0       	rjmp	.+8      	; 0x542 <start_menu+0xae>
 53a:	88 e0       	ldi	r24, 0x08	; 8
 53c:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <menu_states>
 540:	44 c0       	rjmp	.+136    	; 0x5ca <start_menu+0x136>
 542:	80 b1       	in	r24, 0x00	; 0
 544:	08 95       	ret
 546:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <menu_states>
 54a:	82 30       	cpi	r24, 0x02	; 2
 54c:	09 f1       	breq	.+66     	; 0x590 <start_menu+0xfc>
 54e:	30 f4       	brcc	.+12     	; 0x55c <start_menu+0xc8>
 550:	88 23       	and	r24, r24
 552:	51 f0       	breq	.+20     	; 0x568 <start_menu+0xd4>
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	09 f0       	breq	.+2      	; 0x55a <start_menu+0xc6>
 558:	4e c0       	rjmp	.+156    	; 0x5f6 <start_menu+0x162>
 55a:	0a c0       	rjmp	.+20     	; 0x570 <start_menu+0xdc>
 55c:	86 30       	cpi	r24, 0x06	; 6
 55e:	41 f1       	breq	.+80     	; 0x5b0 <start_menu+0x11c>
 560:	88 30       	cpi	r24, 0x08	; 8
 562:	09 f0       	breq	.+2      	; 0x566 <start_menu+0xd2>
 564:	48 c0       	rjmp	.+144    	; 0x5f6 <start_menu+0x162>
 566:	31 c0       	rjmp	.+98     	; 0x5ca <start_menu+0x136>
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <menu_states>
 56e:	08 95       	ret
 570:	6b e3       	ldi	r22, 0x3B	; 59
 572:	71 e0       	ldi	r23, 0x01	; 1
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	23 de       	rcall	.-954    	; 0x1c0 <LCD_DisplayString_NO_CLEAR>
 57a:	66 e4       	ldi	r22, 0x46	; 70
 57c:	71 e0       	ldi	r23, 0x01	; 1
 57e:	82 e1       	ldi	r24, 0x12	; 18
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	1e de       	rcall	.-964    	; 0x1c0 <LCD_DisplayString_NO_CLEAR>
 584:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <counter>
 588:	8f 5f       	subi	r24, 0xFF	; 255
 58a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <counter>
 58e:	08 95       	ret
 590:	62 e5       	ldi	r22, 0x52	; 82
 592:	71 e0       	ldi	r23, 0x01	; 1
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	13 de       	rcall	.-986    	; 0x1c0 <LCD_DisplayString_NO_CLEAR>
 59a:	61 e6       	ldi	r22, 0x61	; 97
 59c:	71 e0       	ldi	r23, 0x01	; 1
 59e:	82 e1       	ldi	r24, 0x12	; 18
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e de       	rcall	.-996    	; 0x1c0 <LCD_DisplayString_NO_CLEAR>
 5a4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <counter>
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <counter>
 5ae:	08 95       	ret
 5b0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <POSITION>
 5b4:	89 30       	cpi	r24, 0x09	; 9
 5b6:	20 f4       	brcc	.+8      	; 0x5c0 <start_menu+0x12c>
 5b8:	8f 5f       	subi	r24, 0xFF	; 255
 5ba:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <POSITION>
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <start_menu+0x132>
 5c0:	87 e0       	ldi	r24, 0x07	; 7
 5c2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <POSITION>
 5c6:	21 cf       	rjmp	.-446    	; 0x40a <update_menu>
 5c8:	08 95       	ret
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <gameState>
 5d0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <POSITION>
 5d4:	88 30       	cpi	r24, 0x08	; 8
 5d6:	39 f0       	breq	.+14     	; 0x5e6 <start_menu+0x152>
 5d8:	89 30       	cpi	r24, 0x09	; 9
 5da:	49 f0       	breq	.+18     	; 0x5ee <start_menu+0x15a>
 5dc:	87 30       	cpi	r24, 0x07	; 7
 5de:	51 f4       	brne	.+20     	; 0x5f4 <start_menu+0x160>
 5e0:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <CURRENT_PLAYER>
 5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <start_menu+0x160>
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <CURRENT_PLAYER>
 5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <start_menu+0x160>
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <CURRENT_PLAYER>
 5f4:	7c ce       	rjmp	.-776    	; 0x2ee <render>
 5f6:	08 95       	ret

000005f8 <main>:
		
	}
}

int main(void)
{
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	00 d0       	rcall	.+0      	; 0x5fe <main+0x6>
 5fe:	00 d0       	rcall	.+0      	; 0x600 <main+0x8>
 600:	00 d0       	rcall	.+0      	; 0x602 <main+0xa>
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
 DDRA = 0x00; PORTA= 0xFF;
 606:	11 b8       	out	0x01, r1	; 1
 608:	8f ef       	ldi	r24, 0xFF	; 255
 60a:	82 b9       	out	0x02, r24	; 2
 DDRB= 0xFF; PORTB= 0x00;
 60c:	84 b9       	out	0x04, r24	; 4
 60e:	15 b8       	out	0x05, r1	; 5
 DDRC= 0xFF; PORTC= 0xFF;
 610:	87 b9       	out	0x07, r24	; 7
 612:	88 b9       	out	0x08, r24	; 8
 DDRD= 0xC0; PORTD= 0x7F;  
 614:	80 ec       	ldi	r24, 0xC0	; 192
 616:	8a b9       	out	0x0a, r24	; 10
 618:	8f e7       	ldi	r24, 0x7F	; 127
 61a:	8b b9       	out	0x0b, r24	; 11
 LCD_init();
 61c:	85 dd       	rcall	.-1270   	; 0x128 <LCD_init>
 //static task 
 static task task1;
static task task2;
static task task3;
 
 task * tasks[]={ & task1, & task2, & task3};
 61e:	86 e0       	ldi	r24, 0x06	; 6
 620:	e9 e2       	ldi	r30, 0x29	; 41
 622:	f1 e0       	ldi	r31, 0x01	; 1
 624:	de 01       	movw	r26, r28
 626:	11 96       	adiw	r26, 0x01	; 1
 628:	01 90       	ld	r0, Z+
 62a:	0d 92       	st	X+, r0
 62c:	8a 95       	dec	r24
 62e:	e1 f7       	brne	.-8      	; 0x628 <main+0x30>
const unsigned short numTasks = sizeof(tasks)/sizeof(task *);

//task 1 initialization
task1.state =0;
 630:	ee e7       	ldi	r30, 0x7E	; 126
 632:	f1 e0       	ldi	r31, 0x01	; 1
 634:	10 82       	st	Z, r1
task1.period=1;
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	a0 e0       	ldi	r26, 0x00	; 0
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	81 83       	std	Z+1, r24	; 0x01
 640:	92 83       	std	Z+2, r25	; 0x02
 642:	a3 83       	std	Z+3, r26	; 0x03
 644:	b4 83       	std	Z+4, r27	; 0x04
task1.elapsedTime=0;
 646:	15 82       	std	Z+5, r1	; 0x05
 648:	16 82       	std	Z+6, r1	; 0x06
 64a:	17 82       	std	Z+7, r1	; 0x07
 64c:	10 86       	std	Z+8, r1	; 0x08
task1.TickFct= & P1_POS;
 64e:	25 ef       	ldi	r18, 0xF5	; 245
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	32 87       	std	Z+10, r19	; 0x0a
 654:	21 87       	std	Z+9, r18	; 0x09

task2.state=0;
 656:	e3 e7       	ldi	r30, 0x73	; 115
 658:	f1 e0       	ldi	r31, 0x01	; 1
 65a:	10 82       	st	Z, r1
task2.period=1;
 65c:	81 83       	std	Z+1, r24	; 0x01
 65e:	92 83       	std	Z+2, r25	; 0x02
 660:	a3 83       	std	Z+3, r26	; 0x03
 662:	b4 83       	std	Z+4, r27	; 0x04
task2.elapsedTime=0;
 664:	15 82       	std	Z+5, r1	; 0x05
 666:	16 82       	std	Z+6, r1	; 0x06
 668:	17 82       	std	Z+7, r1	; 0x07
 66a:	10 86       	std	Z+8, r1	; 0x08
task2.TickFct = & render;
 66c:	27 e7       	ldi	r18, 0x77	; 119
 66e:	31 e0       	ldi	r19, 0x01	; 1
 670:	32 87       	std	Z+10, r19	; 0x0a
 672:	21 87       	std	Z+9, r18	; 0x09

task3.state=0;
 674:	e8 e6       	ldi	r30, 0x68	; 104
 676:	f1 e0       	ldi	r31, 0x01	; 1
 678:	10 82       	st	Z, r1
task3.period=1;
 67a:	81 83       	std	Z+1, r24	; 0x01
 67c:	92 83       	std	Z+2, r25	; 0x02
 67e:	a3 83       	std	Z+3, r26	; 0x03
 680:	b4 83       	std	Z+4, r27	; 0x04
task3.elapsedTime=0;
 682:	15 82       	std	Z+5, r1	; 0x05
 684:	16 82       	std	Z+6, r1	; 0x06
 686:	17 82       	std	Z+7, r1	; 0x07
 688:	10 86       	std	Z+8, r1	; 0x08
task3.TickFct = & P2_logic;
 68a:	86 e3       	ldi	r24, 0x36	; 54
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	92 87       	std	Z+10, r25	; 0x0a
 690:	81 87       	std	Z+9, r24	; 0x09

 TimerSet(speed);
 692:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <speed>
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	90 e0       	ldi	r25, 0x00	; 0
  TimerOn();
 69c:	a5 de       	rcall	.-694    	; 0x3e8 <TimerSet>
 69e:	44 de       	rcall	.-888    	; 0x328 <TimerOn>
unsigned short i;
 menu_states= START;
 6a0:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <menu_states>
 6a4:	7e 01       	movw	r14, r28
 6a6:	87 e0       	ldi	r24, 0x07	; 7
 6a8:	e8 0e       	add	r14, r24
 6aa:	f1 1c       	adc	r15, r1
    while (1) 
    {
		if(gameState == 0x00){
 6ac:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <gameState>
 6b0:	81 11       	cpse	r24, r1
			
			start_menu();
 6b2:	39 c0       	rjmp	.+114    	; 0x726 <main+0x12e>
 6b4:	ef de       	rcall	.-546    	; 0x494 <start_menu>
 6b6:	37 c0       	rjmp	.+110    	; 0x726 <main+0x12e>
		}
		if(gameState==0x01){
			
	
		for (i = 0; i < numTasks; i++) {
			if (tasks[i]-> elapsedTime == tasks[i]-> period) {
 6b8:	d6 01       	movw	r26, r12
 6ba:	0d 91       	ld	r16, X+
 6bc:	1d 91       	ld	r17, X+
 6be:	6d 01       	movw	r12, r26
 6c0:	f8 01       	movw	r30, r16
 6c2:	45 81       	ldd	r20, Z+5	; 0x05
 6c4:	56 81       	ldd	r21, Z+6	; 0x06
 6c6:	67 81       	ldd	r22, Z+7	; 0x07
 6c8:	70 85       	ldd	r23, Z+8	; 0x08
 6ca:	81 81       	ldd	r24, Z+1	; 0x01
 6cc:	92 81       	ldd	r25, Z+2	; 0x02
 6ce:	a3 81       	ldd	r26, Z+3	; 0x03
 6d0:	b4 81       	ldd	r27, Z+4	; 0x04
 6d2:	48 17       	cp	r20, r24
 6d4:	59 07       	cpc	r21, r25
 6d6:	6a 07       	cpc	r22, r26
 6d8:	7b 07       	cpc	r23, r27
 6da:	79 f4       	brne	.+30     	; 0x6fa <main+0x102>
				tasks[i]-> state = tasks[i] -> TickFct(tasks[i]-> state);
 6dc:	80 81       	ld	r24, Z
 6de:	01 84       	ldd	r0, Z+9	; 0x09
 6e0:	f2 85       	ldd	r31, Z+10	; 0x0a
 6e2:	e0 2d       	mov	r30, r0
 6e4:	08 2e       	mov	r0, r24
 6e6:	00 0c       	add	r0, r0
 6e8:	99 0b       	sbc	r25, r25
 6ea:	09 95       	icall
 6ec:	d8 01       	movw	r26, r16
 6ee:	8c 93       	st	X, r24
				tasks[i]-> elapsedTime = 0;
 6f0:	f8 01       	movw	r30, r16
 6f2:	15 82       	std	Z+5, r1	; 0x05
 6f4:	16 82       	std	Z+6, r1	; 0x06
 6f6:	17 82       	std	Z+7, r1	; 0x07
 6f8:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]-> elapsedTime += 1;
 6fa:	f8 01       	movw	r30, r16
 6fc:	85 81       	ldd	r24, Z+5	; 0x05
 6fe:	96 81       	ldd	r25, Z+6	; 0x06
 700:	a7 81       	ldd	r26, Z+7	; 0x07
 702:	b0 85       	ldd	r27, Z+8	; 0x08
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	a1 1d       	adc	r26, r1
 708:	b1 1d       	adc	r27, r1
 70a:	85 83       	std	Z+5, r24	; 0x05
 70c:	96 83       	std	Z+6, r25	; 0x06
 70e:	a7 83       	std	Z+7, r26	; 0x07
 710:	b0 87       	std	Z+8, r27	; 0x08
		
		}
		if(gameState==0x01){
			
	
		for (i = 0; i < numTasks; i++) {
 712:	ce 14       	cp	r12, r14
 714:	df 04       	cpc	r13, r15
 716:	81 f6       	brne	.-96     	; 0x6b8 <main+0xc0>
			tasks[i]-> elapsedTime += 1;
		}
		}
		
	
		 while (!TimerFlag);
 718:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <TimerFlag>
 71c:	88 23       	and	r24, r24
 71e:	e1 f3       	breq	.-8      	; 0x718 <main+0x120>
		 TimerFlag = 0;
 720:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <TimerFlag>
	 }
 724:	c3 cf       	rjmp	.-122    	; 0x6ac <main+0xb4>
			
			start_menu();
		
		
		}
		if(gameState==0x01){
 726:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <gameState>
 72a:	81 30       	cpi	r24, 0x01	; 1
 72c:	a9 f7       	brne	.-22     	; 0x718 <main+0x120>
 72e:	ce 01       	movw	r24, r28
 730:	01 96       	adiw	r24, 0x01	; 1
 732:	6c 01       	movw	r12, r24
 734:	c1 cf       	rjmp	.-126    	; 0x6b8 <main+0xc0>

00000736 <__tablejump2__>:
 736:	ee 0f       	add	r30, r30
 738:	ff 1f       	adc	r31, r31
 73a:	00 24       	eor	r0, r0
 73c:	00 1c       	adc	r0, r0
 73e:	0b be       	out	0x3b, r0	; 59
 740:	07 90       	elpm	r0, Z+
 742:	f6 91       	elpm	r31, Z
 744:	e0 2d       	mov	r30, r0
 746:	09 94       	ijmp

00000748 <eeprom_read_byte>:
 748:	f9 99       	sbic	0x1f, 1	; 31
 74a:	fe cf       	rjmp	.-4      	; 0x748 <eeprom_read_byte>
 74c:	92 bd       	out	0x22, r25	; 34
 74e:	81 bd       	out	0x21, r24	; 33
 750:	f8 9a       	sbi	0x1f, 0	; 31
 752:	99 27       	eor	r25, r25
 754:	80 b5       	in	r24, 0x20	; 32
 756:	08 95       	ret

00000758 <eeprom_write_byte>:
 758:	26 2f       	mov	r18, r22

0000075a <eeprom_write_r18>:
 75a:	f9 99       	sbic	0x1f, 1	; 31
 75c:	fe cf       	rjmp	.-4      	; 0x75a <eeprom_write_r18>
 75e:	1f ba       	out	0x1f, r1	; 31
 760:	92 bd       	out	0x22, r25	; 34
 762:	81 bd       	out	0x21, r24	; 33
 764:	20 bd       	out	0x20, r18	; 32
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	fa 9a       	sbi	0x1f, 2	; 31
 76c:	f9 9a       	sbi	0x1f, 1	; 31
 76e:	0f be       	out	0x3f, r0	; 63
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	08 95       	ret

00000774 <eeprom_write_word>:
 774:	f1 df       	rcall	.-30     	; 0x758 <eeprom_write_byte>
 776:	27 2f       	mov	r18, r23
 778:	f0 cf       	rjmp	.-32     	; 0x75a <eeprom_write_r18>

0000077a <_exit>:
 77a:	f8 94       	cli

0000077c <__stop_program>:
 77c:	ff cf       	rjmp	.-2      	; 0x77c <__stop_program>
